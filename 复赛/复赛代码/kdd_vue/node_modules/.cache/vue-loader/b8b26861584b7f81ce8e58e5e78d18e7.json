{"remainingRequest":"C:\\Users\\sa\\Desktop\\openrank\\08\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sa\\Desktop\\openrank\\08\\src\\views\\main-layout.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\sa\\Desktop\\openrank\\08\\src\\views\\main-layout.vue","mtime":1735729007514},{"path":"C:\\Users\\sa\\Desktop\\openrank\\08\\node_modules\\babel-loader\\lib\\index.js","mtime":1734174290000},{"path":"C:\\Users\\sa\\Desktop\\openrank\\08\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1734174290000},{"path":"C:\\Users\\sa\\Desktop\\openrank\\08\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1734174292000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}